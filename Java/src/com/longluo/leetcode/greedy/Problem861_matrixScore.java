package com.longluo.leetcode.greedy;

/**
 * 861. 翻转矩阵后的得分
 * <p>
 * 有一个二维矩阵A其中每个元素的值为0或1。
 * 移动是指选择任一行或列，并转换该行或列中的每一个值：将所有0都更改为1，将所有1都更改为0。
 * 在做出任意次数的移动后，将该矩阵的每一行都按照二进制数来解释，矩阵的得分就是这些数字的总和。
 * 返回尽可能高的分数。
 * <p>
 * 示例：
 * 输入：[[0,0,1,1],[1,0,1,0],[1,1,0,0]]
 * 输出：39
 * [0,0,1,1]  --> 1 1 1 1
 * [1,0,1,0]  --> 1 0 0 1
 * [1,1,0,0]  --> 1 1 1 1
 * <p>
 * 解释：
 * 转换为 [[1,1,1,1],[1,0,0,1],[1,1,1,1]]
 * 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39
 * <p>
 * 提示：
 * 1 <= A.length <= 20
 * 1 <= A[0].length <= 20
 * A[i][j]是0或1
 *
 *
 */
public class Problem861_matrixScore {

    public static int matrixScore(int[][] A) {

        return 0;
    }

    public static void main(String[] args) {

    }
}
